@page "/admin/manage-category"
@using BlazorApp1.Shared.Models
@inject HttpClient Http
@inject IToastService toastService

<h3>Expert Category List</h3>
<SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
    <DialogEvents Closed="Closed"></DialogEvents>
    <DialogTemplates>
        @*Here you can customize the Header and Content of delete confirmation dialog*@
        <Header> Delete Record</Header>
        <Content> You are about to Delete a Record @SelectedData ?</Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton OnClick="@OkClick" Content="OK" IsPrimary="true"></DialogButton>
        <DialogButton OnClick="@CancelClick" Content="Cancel"></DialogButton>
    </DialogButtons>
</SfDialog>
<SfGrid DataSource="@categories" AllowPaging="true" Toolbar="@(new string[] {"Add", "Edit" ,"Delete" })">
    <GridPageSettings PageSize="10"></GridPageSettings>
    <GridEvents OnActionBegin="OnActionBegin" RowSelected="RowSelectHandler" OnActionComplete="ActionComplete" TValue="Categories"></GridEvents>
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="@EditMode.Dialog">
        <Template>
            @{
                var category = (context as Categories);
                <div>
                    <div class="row">
                        <div class="form-group col-md-6">
                            <label class="e-float-text e-label-top">Category Name</label>
                            <SfTextBox ID="CategoryName" @bind-Value="@(category.CategoryName)" TValue="string?"></SfTextBox>
                        </div>
                        <div class="form-group col-md-6">
                            <label class="e-float-text e-label-top">Description</label>
                            <SfTextBox ID="Description" @bind-Value="@(category.Description)"></SfTextBox>
                        </div>
                    </div>
                </div>
            }
        </Template>
    </GridEditSettings>
    <GridColumns>
        <GridColumn Field=@nameof(category.Id) HeaderText="ID" IsPrimaryKey="true" Width="120"></GridColumn>
        <GridColumn Field=@nameof(category.CategoryName) HeaderText="Category Name" Width="140"></GridColumn>
        <GridColumn Field=@nameof(category.Description) HeaderText="Category Description" Width="150"></GridColumn>
    </GridColumns>
</SfGrid>
<style>
    .form-group.col-md-6 {
        width: 200px;
    }

    label.e-float-text {
        position: relative;
        padding-left: 0;
        top: 10%;
    }
</style>

@code {
    private Categories[]? categories;
    private Categories category = new();
    public object SelectedData;
    public bool flag = true;
    SfDialog Dialog;
    public void Closed()
    {
        flag = true;
    }
    private void CancelClick()
    {
        Dialog.HideAsync();
    }
    private async Task OkClick()
    {
        int id = (int)SelectedData;
        //Grid.DeleteRecord();   //Delete the record programmatically while clicking OK button.
        var result = await Http.DeleteAsync($"/api/category/DeleteCategory/{id}");
        if (result != null && result.StatusCode == System.Net.HttpStatusCode.OK)
        {
            toastService.ShowToast(ToastLevel.Success, "Category deleted Successfully");
            await this.FetCategories();
        }
        else
        {
            toastService.ShowToast(ToastLevel.Error, "Error Occured");
        }
        Dialog.HideAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        await this.FetCategories();
    }
    private async Task FetCategories()
    {
        categories = await Http.GetFromJsonAsync<Categories[]>($"/api/category/GetCategories/");
    }
    public void RowSelectHandler(RowSelectEventArgs<Categories> Args)
    {
        SelectedData = Args.Data.Id;
    }
    public void OnActionBegin(ActionEventArgs<Categories> Args)
    {
        if (Args.RequestType.ToString() == "Delete" && flag)
        {
            Args.Cancel = true;  //Cancel default delete action.
            Dialog.ShowAsync();
            flag = false;
        }
    }
    public async Task ActionComplete(ActionEventArgs<Categories> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Action == "Add")
        {
            Console.WriteLine("");
            var data = args.Data;
            // userTaskCls = new()
            //     {
            //         Tasks = data.Tasks,
            //         Description = data.Description,
            //         UserId = data.UserId,
            //         TaskStatusId = data.TaskStatusId,
            //         DueDate = data.DueDate
            //     };
            var result = await Http.PostAsJsonAsync("/api/category/AddUpdate", data);
            var res = result.Content.ReadAsStringAsync().Result;

            if (result != null && result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                toastService.ShowToast(ToastLevel.Success, "category added Successfully");
                await this.FetCategories();
            }
            else
            {
                toastService.ShowToast(ToastLevel.Error, "Error Occured");
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Action == "Edit")
        {
            var data = args.Data;
            var result = await Http.PostAsJsonAsync("/api/category/AddUpdate", data);
            var res = result.Content.ReadAsStringAsync().Result;

            if (result != null && result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                toastService.ShowToast(ToastLevel.Success, "category updated Successfully");
                await this.FetCategories();
            }
            else
            {
                toastService.ShowToast(ToastLevel.Error, "Error Occured");
            }
        }
    }
}
